generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  trainer
  user
  employee
  receptionist
  court_manager
  member
}

enum Gender {
  male
  female
}

enum Goal {
  gain_weight
  lose_weight
  get_fitter
  get_stronger
  get_healthier
  get_more_flexible
  get_more_muscular
  learn_the_basics
}

enum Level {
  beginner
  intermediate
  advanced
  expert
  professional
}

enum PaymentMethod {
  transfer
  cash
  card
  pending
}

enum Location {
  main_warehouse
  post_1
  post_2
}

enum SalePaymentMethod {
  cash
  mercado_pago
}

model ExerciseList {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description     String?
  sets            Int
  reps            Int
  weight          Float?
  duration        Int?     // en minutos, para ejercicios cardio
  notes           String?
  trainer         User           @relation(fields: [trainerId], references: [id], name: "TrainerExercises")
  trainerId       String         @db.ObjectId
  assignedToUsers UserExercise[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model UserExercise {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  exercise       ExerciseList @relation(fields: [exerciseId], references: [id])
  exerciseId     String       @db.ObjectId
  sets           Int?
  reps           Int?
  weight         Float?
  duration       Int?
  notes          String?
  assignedAt     DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String               @unique
  phone              Int?                 @default(0)
  hashedPassword     String
  trainer            String?
  role               Role
  isActive           Boolean?             @default(false)
  gender             Gender
  age                Int?                 @default(18)
  height             Int?                 @default(100)
  weight             Int?                 @default(50)
  goal               Goal                 @default(lose_weight)
  level              Level                @default(beginner)
  post               String?
  rfidCardNumber     String?              @unique
  rfidAssignedAt     DateTime?
  accessPoints       Int                  @default(0)
  membershipType     String?
  membershipStatus   String?              @default("active")
  lastCheckIn        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  exerciseAssignments UserExercise[]
  createdExerciseLists ExerciseList[]     @relation("TrainerExercises")
  accessLogs         AccessLog[]
  stockMovements     StockMovement[]
  sales              Sale[]
  transactions       Transaction[]
}

model MembershipPrice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   @unique
  basePrice   Float
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccessLog {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String?  @db.ObjectId
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  status           String   
  reason           String?
  deviceId         String
  ip               String?
  timestamp        DateTime @default(now())
  pointsDeducted   Int      @default(0)
  isToleranceEntry Boolean  @default(false)
}

enum Month {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

model Court {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String
  reservations CourtReservation[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model CourtReservation {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  courtId         String        @db.ObjectId
  court           Court         @relation(fields: [courtId], references: [id])
  name            String?
  phone           String?
  startTime       DateTime
  endTime         DateTime
  status          String        @default("confirmed")
  paymentMethod   PaymentMethod @default(pending)
  isRecurring     Boolean       @default(false)
  recurrenceEnd   DateTime?
  paidSessions    Int?
  lastPaymentDate DateTime?
  paymentNotes    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transactions    Transaction[]
}

model Event {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  courtIds  String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  price       Float
  image       String?
  stocks      Stock[]
  sales       Sale[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Stock {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  productId String          @db.ObjectId
  product   Product         @relation(fields: [productId], references: [id])
  location  Location
  quantity  Int
  minStock  Int             @default(10)
  movements StockMovement[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model StockMovement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stockId   String   @db.ObjectId
  stock     Stock    @relation(fields: [stockId], references: [id])
  quantity  Int
  type      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Sale {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  productId     String            @db.ObjectId
  product       Product           @relation(fields: [productId], references: [id])
  quantity      Int
  total         Float
  paymentMethod SalePaymentMethod
  location      Location
  userId        String            @db.ObjectId
  user          User              @relation(fields: [userId], references: [id])
  createdAt     DateTime          @default(now())
  transactions  Transaction[]
}

enum TransactionType {
  income
  expense
}

model Transaction {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  type          TransactionType
  category      String
  amount        Float
  description   String?
  paymentMethod PaymentMethod
  location      Location?
  userId        String? @db.ObjectId
  user          User?   @relation(fields: [userId], references: [id])
  saleId        String? @db.ObjectId
  sale          Sale?   @relation(fields: [saleId], references: [id], onDelete: SetNull)
  reservationId String?           @db.ObjectId
  reservation   CourtReservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  PointPackage  PointPackage? @relation(fields: [pointPackageId], references: [id])
  pointPackageId String?       @db.ObjectId
}

model PointPackage {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  points      Int
  price       Float
  description String?
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transactions Transaction[]
}
