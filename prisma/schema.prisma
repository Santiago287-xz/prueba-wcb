// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Prisma schema

enum Role {
  admin
  trainer
  user
  employee // Añadido el nuevo rol
}

enum Gender {
  male
  female
}

enum Goal {
  gain_weight
  lose_weight
  get_fitter
  get_stronger
  get_healthier
  get_more_flexible
  get_more_muscular
  learn_the_basics
}

enum Level {
  beginner
  intermediate
  advanced
  expert
  professional
}

enum PaymentMethod {
  transfer
  cash
  pending
}

enum Location {
  main_warehouse
  post_1
  post_2
}

enum SalePaymentMethod {
  cash
  mercado_pago
}

// User
model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  phone          Int?     @default(0)
  hashedPassword String
  role           Role
  isActive       Boolean? @default(false)
  gender         Gender
  age            Int?     @default(18)
  height         Int?     @default(100)
  weight         Int?     @default(50)
  goal           Goal     @default(lose_weight)
  level          Level    @default(beginner)
  post           String?  // "post_1" o "post_2" (solo para empleados)

  admin     User?   @relation("AdminToUser", fields: [adminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  adminId   String? @map("adminId") @db.ObjectId
  trainer   User?   @relation("TrainerToUser", fields: [trainerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trainerId String? @map("trainerId") @db.ObjectId
  
  adminsForUsers   User[] @relation("AdminToUser")
  trainersForUsers User[] @relation("TrainerToUser")

  courtReservations CourtReservation[]

  notifReceiver Notification[] @relation("userId")
  notifSender   Notification[] @relation("senderId")

  attendanceTrack Attendance[] @relation("attendance_track")

  PasswordResetToken PasswordResetToken[]

  stockMovements StockMovement[] // Relación con movimientos de stock
  sales         Sale[]          // Relación con ventas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  token     String    @unique
  resetAt   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("userId") @db.ObjectId
  createdAt DateTime  @default(now())
}

model DietFoodList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Diet {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  studentId          String               @map("studentId") @db.ObjectId
  fromDate           DateTime
  toDate             DateTime
  periodWithFoodList PeriodWithFoodList[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model PeriodWithFoodList {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  dietFoodId       String
  dietFoodName     String
  breakfast        Boolean
  morningMeal      Boolean
  lunch            Boolean
  eveningSnack     Boolean
  dinner           Boolean
  diet             Diet     @relation(fields: [dietAssignmentId], references: [id])
  dietAssignmentId String   @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum Month {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

model Fees {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  month         Month
  year          String
  message       String
  amount        Int
  isPaid        Boolean   @default(false)
  transactionId String?
  paymentDate   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Exercise
model ExerciseList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  studentId String    @map("studentId") @db.ObjectId
  fromDate  DateTime
  toDate    DateTime
  exercises WorkOut[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model WorkOut {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  exerciseId           String
  exerciseName         String
  sets                 Int
  steps                Int
  kg                   Int
  rest                 Int
  exercise             Exercise @relation(fields: [exerciseAssignmentId], references: [id])
  exerciseAssignmentId String   @db.ObjectId
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum NotificationType {
  diet
  exercise
  fees
  payment
  reminder
  message
  present
  stock_alert // Añadido para las alertas de stock
}

model Notification {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  notification_text String
  type              NotificationType
  userEmail         String?

  user   User?   @relation(fields: [userId], references: [id], name: "userId")
  userId String? @map("userId") @db.ObjectId

  sender    User?    @relation(fields: [senderId], references: [id], name: "senderId")
  senderId  String?  @map("senderId") @db.ObjectId
  read      Boolean  @default(false)
  pathName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  fromTime  String
  toTime    String
  isPresent Boolean @default(false)
  date      String

  student   User?   @relation(fields: [studentId], references: [id], name: "attendance_track")
  studentId String? @map("attendance_track") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Court
model Court {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String             // Ejemplo: "Cancha de Pádel 1", "Cancha de Fútbol 1"
  type         String             // "padel" o "futbol"
  reservations CourtReservation[] // Relación con las reservas
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

// CourtReservation (única definición, con los nuevos campos)
model CourtReservation {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  courtId         String        @db.ObjectId
  court           Court         @relation(fields: [courtId], references: [id])
  userId          String?       @db.ObjectId
  user            User?         @relation(fields: [userId], references: [id])
  guestName       String?
  guestPhone      String?
  startTime       DateTime
  endTime         DateTime
  status          String        @default("confirmed")
  paymentMethod   PaymentMethod @default(pending)
  isRecurring     Boolean       @default(false)
  recurrenceEnd   DateTime?
  // Payment tracking
  paidSessions    Int?          // Number of paid sessions for recurring reservations
  lastPaymentDate DateTime?     // Date of the last payment
  paymentNotes    String?       // Additional notes about payment
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Modelo para eventos (como cumpleaños)
model Event {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   // Ejemplo: "Cumpleaños de Juan"
  courtType String   // "futbol" (para bloquear todas las canchas de fútbol)
  date      DateTime // Fecha del evento
  startTime DateTime // Hora de inicio (12:00)
  endTime   DateTime // Hora de fin (17:00)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Categoría (solo "Bebidas" por ahora)
model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    // Ejemplo: "Bebidas"
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Producto
model Product {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         // Ejemplo: "Agua", "Cerveza"
  description   String?        // Descripción del producto
  categoryId    String         @db.ObjectId
  category      Category       @relation(fields: [categoryId], references: [id])
  price         Float          // Precio de venta
  image         String?        // URL de la imagen (ruta en el servidor)
  stocks        Stock[]        // Relación con el stock en diferentes ubicaciones
  sales         Sale[]         // Relación con las ventas
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Stock (para manejar el inventario en diferentes ubicaciones)
model Stock {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  productId     String         @db.ObjectId
  product       Product        @relation(fields: [productId], references: [id])
  location      Location       // "main_warehouse", "post_1", "post_2"
  quantity      Int            // Cantidad en stock
  minStock      Int            @default(10) // Nivel mínimo de stock (10 unidades)
  movements     StockMovement[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Movimientos de stock (entradas y salidas)
model StockMovement {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  stockId   String    @db.ObjectId
  stock     Stock     @relation(fields: [stockId], references: [id])
  quantity  Int       // Positivo para entradas, negativo para salidas
  type      String    // "entry" o "exit"
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}

// Ventas
model Sale {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  productId     String           @db.ObjectId
  product       Product          @relation(fields: [productId], references: [id])
  quantity      Int              // Cantidad vendida
  total         Float            // Total de la venta (precio * cantidad)
  paymentMethod SalePaymentMethod // "cash" o "mercado_pago"
  location      Location         // "post_1" o "post_2"
  userId        String           @db.ObjectId
  user          User             @relation(fields: [userId], references: [id])
  createdAt     DateTime         @default(now())
}