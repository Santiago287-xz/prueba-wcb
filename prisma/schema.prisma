generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  trainer
  user
  employee
  court_manager
}

enum Gender {
  male
  female
}

enum Goal {
  gain_weight
  lose_weight
  get_fitter
  get_stronger
  get_healthier
  get_more_flexible
  get_more_muscular
  learn_the_basics
}

enum Level {
  beginner
  intermediate
  advanced
  expert
  professional
}

enum PaymentMethod {
  transfer
  cash
  pending
}

enum Location {
  main_warehouse
  post_1
  post_2
}

enum SalePaymentMethod {
  cash
  mercado_pago
}

model User {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String             @unique
  phone          Int?               @default(0)
  hashedPassword String
  role           Role
  isActive       Boolean?           @default(false)
  gender         Gender
  age            Int?               @default(18)
  height         Int?               @default(100)
  weight         Int?               @default(50)
  goal           Goal               @default(lose_weight)
  level          Level              @default(beginner)
  post           String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  
  PasswordResetToken PasswordResetToken[]
  stockMovements     StockMovement[]
  sales              Sale[]
}

model PasswordResetToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  token     String    @unique
  resetAt   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("userId") @db.ObjectId
  createdAt DateTime  @default(now())
}

enum Month {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

model Court {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String
  reservations CourtReservation[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model CourtReservation {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  courtId         String        @db.ObjectId
  court           Court         @relation(fields: [courtId], references: [id])
  name            String?
  phone           String?
  startTime       DateTime
  endTime         DateTime
  status          String        @default("confirmed")
  paymentMethod   PaymentMethod @default(pending)
  isRecurring     Boolean       @default(false)
  recurrenceEnd   DateTime?
  paidSessions    Int?
  lastPaymentDate DateTime?
  paymentNotes    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Event {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courtType String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  price       Float
  image       String?
  stocks      Stock[]
  sales       Sale[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Stock {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  productId  String          @db.ObjectId
  product    Product         @relation(fields: [productId], references: [id])
  location   Location
  quantity   Int
  minStock   Int             @default(10)
  movements  StockMovement[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model StockMovement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stockId   String   @db.ObjectId
  stock     Stock    @relation(fields: [stockId], references: [id])
  quantity  Int
  type      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Sale {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  productId     String           @db.ObjectId
  product       Product          @relation(fields: [productId], references: [id])
  quantity      Int
  total         Float
  paymentMethod SalePaymentMethod
  location      Location
  userId        String           @db.ObjectId
  user          User             @relation(fields: [userId], references: [id])
  createdAt     DateTime         @default(now())
}